# Multi-stage build for AIOS test environment
FROM golang:1.23-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    git \
    make \
    gcc \
    musl-dev \
    sqlite-dev \
    ca-certificates \
    tzdata

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the application for testing
RUN CGO_ENABLED=1 GOOS=linux go build -a -installsuffix cgo \
    -ldflags '-extldflags "-static"' \
    -o aios-test ./cmd/aios

# Build test utilities
RUN go build -o test-runner ./scripts/test-runner.go

# Test stage
FROM alpine:latest AS test

# Install runtime dependencies
RUN apk add --no-cache \
    ca-certificates \
    tzdata \
    curl \
    wget \
    netcat-openbsd \
    postgresql-client \
    redis \
    jq

# Create app user
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# Set working directory
WORKDIR /app

# Copy built binaries
COPY --from=builder /app/aios-test .
COPY --from=builder /app/test-runner .

# Copy configuration and test data
COPY configs/ ./configs/
COPY testdata/ ./testdata/

# Create necessary directories
RUN mkdir -p \
    /app/logs \
    /app/test-reports \
    /app/coverage \
    /app/test-workspace && \
    chown -R appuser:appgroup /app

# Switch to app user
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Expose port
EXPOSE 8080

# Default command
CMD ["./aios-test"]
