# Multi-stage Dockerfile for AIOS Daemon
# This Dockerfile builds the main system daemon with optimized layers

# Development stage
FROM golang:1.23-alpine AS development

# Install development dependencies
RUN apk add --no-cache \
    git \
    make \
    gcc \
    musl-dev \
    sqlite-dev \
    ca-certificates \
    tzdata

# Install Air for hot reloading
RUN go install github.com/air-verse/air@latest

# Install Delve for debugging
RUN go install github.com/go-delve/delve/cmd/dlv@latest

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Expose ports
EXPOSE 8080 9090 2345

# Default command for development
CMD ["air", "-c", ".air.toml"]

# Build stage
FROM golang:1.23-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    git \
    make \
    gcc \
    musl-dev \
    sqlite-dev \
    ca-certificates

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build arguments
ARG VERSION=dev
ARG COMMIT=unknown
ARG BUILD_TIME=unknown

# Build the application
RUN CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build \
    -ldflags="-s -w -X main.Version=${VERSION} -X main.Commit=${COMMIT} -X main.BuildTime=${BUILD_TIME} -extldflags '-static'" \
    -a -installsuffix cgo \
    -o aios-daemon \
    ./cmd/aios-daemon

# Production stage
FROM alpine:3.19 AS production

# Install runtime dependencies
RUN apk add --no-cache \
    ca-certificates \
    tzdata \
    sqlite \
    curl \
    jq \
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S aios && \
    adduser -u 1001 -S aios -G aios

# Set working directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder /app/aios-daemon /app/aios-daemon

# Copy configuration files
COPY --chown=aios:aios configs/ /app/configs/

# Create necessary directories
RUN mkdir -p /app/logs /app/data /app/models && \
    chown -R aios:aios /app

# Switch to non-root user
USER aios

# Expose ports
EXPOSE 8080 9090

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Set environment variables
ENV AIOS_ENV=production
ENV AIOS_CONFIG_PATH=/app/configs
ENV AIOS_LOG_LEVEL=info

# Run the application
ENTRYPOINT ["/app/aios-daemon"]
CMD ["--config", "/app/configs/environments/production.yaml"]

# Labels for metadata
LABEL maintainer="AIOS Team <team@aios.dev>"
LABEL org.opencontainers.image.title="AIOS Daemon"
LABEL org.opencontainers.image.description="Main System Daemon for AIOS"
LABEL org.opencontainers.image.vendor="AIOS"
LABEL org.opencontainers.image.licenses="MIT"
LABEL org.opencontainers.image.source="https://github.com/aios/aios"
LABEL org.opencontainers.image.documentation="https://docs.aios.dev"
