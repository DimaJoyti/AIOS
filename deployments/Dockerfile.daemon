# Multi-stage Dockerfile for AIOS Daemon

# Development stage
FROM golang:1.22-alpine AS development

# Install development dependencies
RUN apk add --no-cache \
    git \
    make \
    gcc \
    musl-dev \
    sqlite-dev \
    ca-certificates \
    tzdata

# Install Air for hot reloading
RUN go install github.com/air-verse/air@latest

# Install Delve for debugging
RUN go install github.com/go-delve/delve/cmd/dlv@latest

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Expose ports
EXPOSE 8080 9090 2345

# Default command for development
CMD ["air", "-c", ".air.toml"]

# Build stage
FROM golang:1.22-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    git \
    make \
    gcc \
    musl-dev \
    sqlite-dev \
    ca-certificates

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the application
RUN CGO_ENABLED=1 GOOS=linux go build \
    -ldflags="-w -s -extldflags '-static'" \
    -a -installsuffix cgo \
    -o aios-daemon \
    ./cmd/aios-daemon

# Production stage
FROM alpine:latest AS production

# Install runtime dependencies
RUN apk --no-cache add \
    ca-certificates \
    tzdata \
    sqlite \
    && update-ca-certificates

# Create non-root user
RUN addgroup -g 1001 -S aios && \
    adduser -u 1001 -S aios -G aios

# Set working directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder /app/aios-daemon .

# Copy configuration files
COPY --chown=aios:aios configs/ ./configs/

# Create data directory
RUN mkdir -p /app/data && chown -R aios:aios /app/data

# Switch to non-root user
USER aios

# Expose ports
EXPOSE 8080 9090

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

# Default command
CMD ["./aios-daemon"]
