version: '3.8'

services:
  # AIOS Daemon - Main system service
  aios-daemon:
    build:
      context: ..
      dockerfile: deployments/Dockerfile.daemon
      target: production
      args:
        VERSION: ${AIOS_VERSION:-staging}
        COMMIT: ${AIOS_COMMIT:-unknown}
        BUILD_TIME: ${AIOS_BUILD_TIME:-unknown}
    image: ghcr.io/aios/aios-daemon:${AIOS_VERSION:-staging}
    container_name: aios-daemon-staging
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "9090:9090"
    environment:
      - AIOS_ENV=staging
      - AIOS_CONFIG_PATH=/app/configs
      - AIOS_LOG_LEVEL=${AIOS_LOG_LEVEL:-info}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - JAEGER_ENDPOINT=${JAEGER_ENDPOINT}
      - OTLP_ENDPOINT=${OTLP_ENDPOINT}
    volumes:
      - aios-data:/app/data
      - aios-logs:/app/logs
      - aios-models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      jaeger:
        condition: service_started
    networks:
      - aios-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # AIOS Assistant - AI assistant service
  aios-assistant:
    build:
      context: ..
      dockerfile: deployments/Dockerfile.assistant
      args:
        VERSION: ${AIOS_VERSION:-staging}
        COMMIT: ${AIOS_COMMIT:-unknown}
        BUILD_TIME: ${AIOS_BUILD_TIME:-unknown}
    image: ghcr.io/aios/aios-assistant:${AIOS_VERSION:-staging}
    container_name: aios-assistant-staging
    restart: unless-stopped
    ports:
      - "8081:8081"
      - "9091:9091"
    environment:
      - AIOS_ENV=staging
      - AIOS_CONFIG_PATH=/app/configs
      - AIOS_LOG_LEVEL=${AIOS_LOG_LEVEL:-info}
      - AI_LLM_PROVIDER=${AI_LLM_PROVIDER:-ollama}
      - AI_LLM_ENDPOINT=${AI_LLM_ENDPOINT}
      - AI_LLM_MODEL=${AI_LLM_MODEL:-llama2}
    volumes:
      - aios-data:/app/data
      - aios-logs:/app/logs
      - aios-models:/app/models
    depends_on:
      - aios-daemon
      - ollama
    networks:
      - aios-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 1G

  # AIOS Desktop - Desktop environment service
  aios-desktop:
    build:
      context: ..
      dockerfile: deployments/Dockerfile.desktop
      args:
        VERSION: ${AIOS_VERSION:-staging}
        COMMIT: ${AIOS_COMMIT:-unknown}
        BUILD_TIME: ${AIOS_BUILD_TIME:-unknown}
    image: ghcr.io/aios/aios-desktop:${AIOS_VERSION:-staging}
    container_name: aios-desktop-staging
    restart: unless-stopped
    ports:
      - "8082:8082"
      - "9092:9092"
      - "5900:5900"  # VNC port
    environment:
      - AIOS_ENV=staging
      - AIOS_CONFIG_PATH=/app/configs
      - AIOS_LOG_LEVEL=${AIOS_LOG_LEVEL:-info}
      - DISPLAY=:99
      - XDG_RUNTIME_DIR=/tmp
    volumes:
      - aios-data:/app/data
      - aios-logs:/app/logs
      - aios-screenshots:/app/screenshots
    depends_on:
      - aios-daemon
    networks:
      - aios-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aios-postgres-staging
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ../scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - aios-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aios-redis-staging
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - aios-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Ollama for local LLM
  ollama:
    image: ollama/ollama:latest
    container_name: aios-ollama-staging
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    networks:
      - aios-network
    environment:
      - OLLAMA_HOST=0.0.0.0
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: aios-jaeger-staging
    restart: unless-stopped
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    volumes:
      - jaeger-data:/tmp
    networks:
      - aios-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: aios-prometheus-staging
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ../configs/prometheus.staging.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - aios-network
    depends_on:
      - aios-daemon
      - aios-assistant
      - aios-desktop
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: aios-grafana-staging
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ../configs/grafana:/etc/grafana/provisioning:ro
    networks:
      - aios-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

volumes:
  aios-data:
    driver: local
  aios-logs:
    driver: local
  aios-models:
    driver: local
  aios-screenshots:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  ollama-data:
    driver: local
  jaeger-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  aios-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
